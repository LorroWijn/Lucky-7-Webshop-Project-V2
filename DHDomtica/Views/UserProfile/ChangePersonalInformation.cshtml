@model DHDomtica.ViewModels.SignUpViewModel

@{
    ViewBag.Title = "ChangePersonalInformation";
}

@{
    List<SelectListItem> sexOfUsers = new List<SelectListItem>();
    sexOfUsers.Add(new SelectListItem
    {
        Text = "Man",
        Value = "Man",
    });
    sexOfUsers.Add(new SelectListItem
    {
        Text = "Vrouw",
        Value = "Vrouw",
    });
    sexOfUsers.Add(new SelectListItem
    {
        Text = "X",
        Value = "X"
    });
}

@{
    List<SelectListItem> countrydropdown = new List<SelectListItem>();
    countrydropdown.Add(new SelectListItem
    {
        Text = "Nederland",
        Value = "Nederland",
    });
    countrydropdown.Add(new SelectListItem
    {
        Text = "Buiten Nederland",
        Value = "Buiten Nederland",
    });
}

@{
    List<SelectListItem> provincedropdown = new List<SelectListItem>();
    provincedropdown.Add(new SelectListItem
    {
        Text = "Friesland",
        Value = "Friesland",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Groningen",
        Value = "Groningen",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Drenthe",
        Value = "Drenthe",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Overijssel",
        Value = "Overijssel",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Flevoland",
        Value = "Flevoland",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Gelderland",
        Value = "Gelderland",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Utrecht",
        Value = "Utrecht",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Noord-Holland",
        Value = "Noord-Holland",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Zuid-Holland",
        Value = "Zuid-Holland",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Zeeland",
        Value = "Zeeland",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Noord-Brabant",
        Value = "Noord-Brabant",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Limburg",
        Value = "Limburg",
    });
    provincedropdown.Add(new SelectListItem
    {
        Text = "Overig",
        Value = "Overig",
    });
}

<h2>Persoonlijke informatie aanpassen</h2>

@using (Html.BeginForm("ChangePersonalInformation", "UserProfile", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    @*<div class="form-horizontal">
            <hr />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <label class="label-success">@ViewBag.AccountInformationChangedMessage</label>
                    @*Message moet veranderd worden
                </div>
            </div>
        </div>*@

    <div class="form-horizontal">
            <hr />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <label class="label-success">@ViewBag.BadPasswordMessage</label>
                </div>
            </div>
        </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(x => Model.Gender, sexOfUsers, htmlAttributes: new { @class = "form-control", id = "Gender" })
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EMail, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.EMail, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EMail, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <label class="label-danger">@ViewBag.DuplicateMessage</label>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.BillingAddress, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BillingAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BillingAddress, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(x => Model.Country, countrydropdown, htmlAttributes: new { @class = "form-control", id = "Country" })
            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Province, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(x => Model.Province, provincedropdown, htmlAttributes: new { @class = "form-control", id = "Province" })
            @Html.ValidationMessageFor(model => model.Province, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <p>Wanneer uw persoonsgegevens succesvol zijn veranderd, gaat u terug naar Uw accountinformatie</p>
            <input type="submit" value="Account aanpassen" button class="btn btn-outline-success my-2 my-sm-0" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
@*Misschien moet hier nog een pagina voor met de persoonlijke informatie erop. Vervolgens hierop een passwordcheck doen en dan naar de edit pagina verwijzen.*@


